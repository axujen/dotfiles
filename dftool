#!/usr/bin/env bash
## vim: ft=sh
## dftool: the script that makes the .magic happen
## TODO: more testing with strict mode
## TODO: reorganize with source->dest folders, pre/post unpack hooks 
## and patch(?) based multiple machine handling, this the dream :/
## also maybe manage /etc ?
set -euo pipefail

# Get the real dotfiles directory
ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
DOTFILES_PATH=$(dirname "$ABSOLUTE_PATH")

# Hardcoded directories
DIR_BASE="$DOTFILES_PATH/home"
DIR_BAK="$DOTFILES_PATH/backups"
LOGFILE="$DOTFILES_PATH/log"

# Settings
VERBOSE=false
CLOBBER=false
QUIET=false

DESC="This script unpacks dotfiles stored in a git repo to your home directory."
USAGE="$DESC
$(basename "$0") [-vcqh] install/uninstall/list
\t-c\toverwrite existing files
\t-v\tverbose, show same information as the log
\t-q\tquiet, supress all output
\t-h\tshow this help text and exit"

function log(){
	# Log output to stdout and to a file.
	# Usage: log $text $force
	# text: The string the be logged
	# force: binary forcing the output to stdout regardless of the verbose 
	# argument
	# note: the quiet argument is still respected

	local TEXT=$1
    local FORCE=${2:-false}

	if ! $QUIET; then
        if $FORCE || $VERBOSE; then
            echo "$TEXT"
        fi
	fi
	echo "[$(date +%T)] $TEXT" >> "$LOGFILE"
}

function install_file(){
	# Link a file from the dotfiles directory to its destination
	# Usage: install_file $file $dest
	# file:	path to the file to be unpacked
	# dest: destination localtion
	# note: all paths must be absolute

	local file=$1
	local dest=$2

	# Assuming that symlinks are previous dotfiles installs
	if [[ -L "$dest" ]]; then
		log "Deleting $dest because it was a symbolic link."
		rm -f "$dest"

	elif [[ -e "$dest" ]]; then
		# Never overwrite regular files without asking
		# TODO: y/n/a prompt.
		if [[ "$CLOBBER" != true ]]; then
			log "Failed to install $file: destination exists."
			return
		fi

		# Backup regular files in case they are being overwritten
		bkp "$dest"
	fi

	log "Installing $file"
	ln -s "$file" "$dest"
}

function install_dir(){
	# Unpack a directory to its destination
	# Usage: install_dir $dir $dest
	# dir: directory to be installed
	# dest: destination path
	# note: all paths must be absolute

	local dir=$1
	local dest=$2

	# Make sure a directory always exists before trying to symlink into it
	[[ -e "$dest" ]] || mkdir "$dest"

	# This is deprecated behaviour based on when the script used to symlink dir
	# TODO: Error or prompt the user for action when the destinatio directory
	# is a symlink
	if [[ -L "$dest" ]]; then
		log "Deleting $dest because it was a symbolic link."
		rm -f "$dest"
	fi

	# If the destination is a regular file then back it up
	# TODO: Might require user confirmation on this.
	[[ -d "$dest" ]] || bkp "$dest"

	log "Unpacking directory $dir" true
	for item in $dir/*; do
		[[ $item == "$dir/*" ]] && break # emptry dir
		target="$dest/$(basename "$item")"
		if [[ -d $item ]]; then install_dir "$item" "$target"; else install_file "$item" "$target"; fi
	done
}

function bkp(){
	# Backup a file before overwriting it.
	# Usage: bkp $file
	# file: file to be backed up
	# TODO: redo the layout structure for the backups

	local file=$1
    local basename
    local basedir
    basename=$(basename "$file")
	basedir=\"$DIR_BAK/"$(dirname "$file" | tr / _)"\"
	local bak="$basedir/${basename#.}"

	[[ -e "$basedir" ]] || mkdir -p "$basedir"

	if [[ -e "$bak" ]]; then
		i=1
		local new_bak=$bak.$i
		while [[ -e "$new_bak" ]] ; do
            let "i=i+1"
			new_bak=$bak.$i
		done
		bak=$new_bak
	fi

	log "Backing up $file"
	mv -f "$file" "$bak"
}

function get_managed_files() {
    # Get a list of all files managed inside a dotfiles folder
    # Usage: get_managed_files $source
    # source:  dotfiles folder.
    source_dir=${1:-}
    target_dir=${2:-}

    if [ -z "$source_dir" ]; then
        log "get_managed_files requires atleast 1 argument"
        exit 1
    fi

    for source in $source_dir/*; do
        # If we are in a subdirectory
        if [[  -n $target_dir ]]; then
            target="$target_dir/$(basename "$source")"
        else
            target="$HOME/.$(basename "$source")"
        fi

        # If source is a directory
        if [[ -d "$source" ]]; then
            get_managed_files "$source" "$target"
        else
            # Only symlinks are managed
            if  [[ -L $target ]]; then
                echo "$target"
            fi
        fi
    done
}

function get_managed_dirs() {
    source=$1

    dirs=($(find "$source"/* -type d))
    for dir in "${dirs[@]}"; do
        target="$HOME/.${dir#$source/}"
        echo "$target"
    done
}

# Commands
function install() {
    [[ -n "$1" ]] && BASE=$1 || BASE=$DIR_BASE

    log "Unpacking your dotfiles." true
    for item in $BASE/*; do
        item=$(realpath -s "$item")
    	target="$HOME/.$(basename "$item")"
        if [[ -d "$item" ]]; then
            install_dir "$item" "$target"
        else
            install_file "$item" "$target"
        fi
    done
    log "Done unpacking." true
}

function uninstall() {
    [[ -n "$1" ]] && BASE=$1 || BASE=$DIR_BASE

    # Warn the user before you continue.
    read -rp "This operation is dangerous! type \"YES\" to continue? " choice
    [[ "$choice" != "YES" ]] && exit

    # First remove any symlinks
    files=($(get_managed_files "$BASE"))
    echo "Deleting symlinks."
    for file in "${files[@]}"; do
        log "Deleting $file"
        rm "$file"
    done
    echo "Done."

    # Then delete empty directories
    dirs=($(get_managed_dirs "$BASE"))
    dirs=($(for i in "${dirs[@]}"; do echo "$i"; done | sort -r)) # Reverse sort the directories

    echo "Deleting empty directories"
    for dir in "${dirs[@]}"; do
        if [[ $(ls -A "$dir") ]]; then
            # Non-Empty directory
            log "$dir contains files, skipping!"
        else
            # Empty directory
            log "Deleting empty directory $dir"
            rm -r "$dir"
        fi
    done
    echo "Done."
}

function list_files() {
    [[ -n "$1" ]] && BASE=$1 || BASE=$DIR_BASE

    files=($(get_managed_files "$BASE"))
    for file in "${files[@]}"; do
        echo "$file"
    done
}

## Argument parsing
OPTIND=1
while getopts "hvqc:" opt; do
	case "$opt" in
		h)
			echo -e "$USAGE"
			exit
			;;
		v)
			VERBOSE=true;;
		q)
			QUIET=true;;
		c)
			CLOBBER=true;;
        *)
            echo -e "$USAGE"
            exit
            ;;
	esac
done

## Command parsing and execution.
shift "$((OPTIND -1))"
CMD="${1:-}"
DIR="${2:-}"
case "$CMD" in
    install|ins)
        install "$DIR"
        exit;;
    uninstall|rm)
        uninstall "$DIR"
        exit;;
    list|ls)
        list_files "$DIR"
        exit;;
    *)
        echo "Unknown command: $CMD"
        echo -e "$USAGE"
        exit;;
esac
