## vim: ft=sh fdm=marker
## ~/.bashrc: bash configuration
## also see ~/.inputrc
## common ENV variables should go in ~/.profile or ~/.xprofile

# Gentoo bashrc prompt
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# {{{ Gentoo Prompt
# {{{ Change the window title of X terminals 
case ${TERM} in
	[aEkx]term*|rxvt*|gnome*|konsole*|interix)
		PS1='\[\033]0;\u@\h:\w\007\]'
		;;
	screen*)
		PS1='\[\033k\u@\h:\w\033\\\]'
		;;
	tmux*)
		PS1='\[\033k\u@\h:\w\033\\\]'
		;;
	*)
		unset PS1
		;;
esac
# }}}

# {{{ Prompt
# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.
use_color=false
if type -P dircolors >/dev/null ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	LS_COLORS=
	if [[ -f ~/.dir_colors ]] ; then
		# If you have a custom file, chances are high that it's not the default.
		used_default_dircolors="no"
		eval "$(dircolors -b ~/.dir_colors)"
	elif [[ -f /etc/DIR_COLORS ]] ; then
		# People might have customized the system database.
		used_default_dircolors="maybe"
		eval "$(dircolors -b /etc/DIR_COLORS)"
	else
        # shellcheck disable=2034
		used_default_dircolors="yes"
		eval "$(dircolors -b)"
	fi
	if [[ -n ${LS_COLORS:+set} ]] ; then
		use_color=true
	fi
	unset used_default_dircolors
else
	# Some systems (e.g. BSD & embedded) don't typically come with
	# dircolors so we need to hardcode some terminals in here.
	case ${TERM} in
	[aEkx]term*|rxvt*|gnome*|konsole*|screen|cons25|*color) use_color=true;;
	esac
fi

if ${use_color} ; then
	if [[ ${EUID} == 0 ]] ; then
		PS1+='\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
	else
		PS1+='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1+='\u@\h \W \$ '
	else
		PS1+='\u@\h \w \$ '
	fi
fi
# }}}
# }}}

# {{{ Settings
shopt -s checkhash # check hash table for commands before $PATH
shopt -s checkwinsize # send resize signal to bash
shopt -s no_empty_cmd_completion # dont autocomplete empty lines
shopt -s histappend # append to history
# }}}

# {{{ Auto complete
# use bash-completion if installed
# shellcheck disable=SC1091
if [ -r "/usr/share/bash-completion/bash_completion" ]; then source "/usr/share/bash-completion/bash_completion"; fi
# Command not found!
# shellcheck disable=SC1091
if [ -r "/usr/share/doc/pkgfile/command-not-found.bash" ]; then source "/usr/share/doc/pkgfile/command-not-found.bash"; fi

bind TAB:menu-complete # first tab shows suggestions, second one cycles them
complete -c man which # command completion
complete -cf sudo # command and file completion
# }}}

# Load common settings
COMMONDRC="$HOME"/.shellrc/common
# shellcheck disable=SC1090
if [ -r "$COMMONDRC" ]; then source "$COMMONDRC"; fi

# unset vars used only inside this file
unset use_color sh COMMONDRC
