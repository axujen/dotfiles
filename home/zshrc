## vim: ft=zsh fdm=marker
## ~/.zshrc: zsh configuration file
## common ENV variables should go in ~/.profile or ~/.xprofile
## common rc settings should go in ~/.shellrc/common
## keep this for zsh specific code that can't go in ~/.zprofile

typeset -U PATH
setopt appendhistory extendedglob hist_find_no_dups autocd hist_ignore_dups
unsetopt beep

# {{{ Completion
if [ -r "$HOME"/.shellrc/zsh.completion ]; then source "$HOME"/.shellrc/zsh.completion; fi
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME"/zsh/completion_cache
# }}}

# {{{ Prompt
# https://wiki.archlinux.org/index.php/zsh#Customizing_the_prompt
autoload -U promptinit && promptinit
autoload -U colors && colors

# {{{ Color defs
black="%{$fg[black]%}"
green="%{$fg[green]%}"
blue="%{$fg[blue]%}"
cyan="%{$fg[cyan]%}"
red="%{$fg[red]%}"
yellow="%{$fg[yellow]%}"
magneta="%{$fg[magneta]%}"
white="%{$fg[white]%}"
reset="%{$reset_color%}"
# }}}

# {{{ Vim mode indicator
# vim_ins_mode="%{$fg[yellow]%}[INS]%{$reset_color%}"
vim_ins_mode="%{$reset_color%}"
vim_cmd_mode="%{$fg[red]%}[CMD]%{$reset_color%}"
vim_mode=$vim_ins_mode

function zle-keymap-select {
  vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
  zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish {
  vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# Fix a bug when you C-c in CMD mode and you'd be prompted with CMD mode indicator, while in fact you would be in INS mode
# Fixed by catching SIGINT (C-c), set vim_mode to INS and then repropagate the SIGINT, so if anything else depends on it, we will not break it
# Thanks Ron! (see comments)
function TRAPINT() {
  vim_mode=$vim_ins_mode
  return $(( 128 + $1 ))
}
# }}}

# {{{ Git prompt
setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
zstyle ':vcs_info:*' enable git cvs svn

# or use pre_cmd, see man zshcontrib
vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}
# }}}

# {{{{
# Ranger Mode
function ranger_mode() {
    if [ -n "$RANGER_LEVEL" ]; then
        echo "$green% RANGER$reset"
    fi
}
# }}}}

PROMPT=$'${vim_mode}$yellow(%n@%m) $(ranger_mode)$reset:$green%3~$red%#$reset '
RPROMPT=$'$(vcs_info_wrapper)'
# }}}

# {{{ Keybinds
bindkey -v
KEYTIMEOUT=1 # instant mode switch

# Better history search with C-r and C-s
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward

# Use the vi navigation keys in menu completion
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Fix backspace not working in vi mode after using a or A
# see https://superuser.com/a/533685
bindkey "^?" backward-delete-char
bindkey "^W" backward-kill-word 
bindkey "^H" backward-delete-char      # Control-h also deletes the previous char
bindkey "^U" backward-kill-line

# commands, use bindkey -s 'key' 'command\n'
# you can find the by pressing it in cat, for reference control=^, alt=^[
# you can also use Control-v key in vim
bindkey -s 'e' 'ranger\n'
bindkey -s "t" 'tmux new-session -c "$HOME" -A -t "$USER"\n'
bindkey -s "m" 'ncmpcpp\n'

# {{{ ZKBD
autoload zkbd
ZKBDDIR=${ZDOTDIR:-$HOME}/.zkbd
ZKBDFILE=$ZKBDDIR/$TERM
if [ -r $ZKBDFILE ]; then
	source $ZKBDFILE
	[ -n ${key[Backspace]}	] && bindkey "${key[Backspace]}"	backward-delete-char
	[ -n ${key[Delete]}		] && bindkey "${key[Delete]}"		delete-char
	[ -n ${key[Insert]}		] && bindkey "${key[Insert]}"		overwrite-mode
	[ -n ${key[Home]}		] && bindkey "${key[Home]}"			beginning-of-line
	[ -n ${key[End]}		] && bindkey "${key[End]}"			end-of-line
	[ -n ${key[Left]}		] && bindkey "${key[Left]}"			backward-char
	[ -n ${key[Right]}		] && bindkey "${key[Right]}"		forward-char
	
	# History search based on current input
	[ -n "${key[Up]}"		] && bindkey "${key[Up]}"		history-beginning-search-backward
	[ -n "${key[Down]}"		] && bindkey "${key[Down]}"		history-beginning-search-forward
	[ -n "${key[PageUp]}"	] && bindkey "${key[PageUp]}"	history-search-backward
	[ -n "${key[PageDown]}"	] && bindkey "${key[PageDown]}"	history-search-forward
else
	# echo "No zkbd settings found for this terminal, falling back to terminfo."

    # Falllback to terminfo http://zshwiki.org/home/zle/bindkeys
    # create a zkbd compatible hash;
    # to add other keys to this hash, see: man 5 terminfo
    typeset -A key

    key[Home]="$terminfo[khome]"
    key[End]="$terminfo[kend]"
    key[Insert]="$terminfo[kich1]"
    key[Backspace]="$terminfo[kbs]"
    key[Delete]="$terminfo[kdch1]"
    key[Up]="$terminfo[kcuu1]"
    key[Down]="$terminfo[kcud1]"
    key[Left]="$terminfo[kcub1]"
    key[Right]="$terminfo[kcuf1]"
    key[PageUp]="$terminfo[kpp]"
    key[PageDown]="$terminfo[knp]"

    # setup key accordingly
    [ -n "$key[Backspace]"  ] && bindkey "$key[Backspace]" backward-delete-char
    [ -n "$key[Delete]"     ] && bindkey "$key[Delete]"    delete-char
    [ -n "$key[Insert]"     ] && bindkey "$key[Insert]"    overwrite-mode
    [ -n "$key[Home]"       ] && bindkey "$key[Home]"      beginning-of-line
    [ -n "$key[End]"        ] && bindkey "$key[End]"       end-of-line
	[ -n "$key[Left]"		] && bindkey "$key[Left]"      backward-char
	[ -n "$key[Right]"		] && bindkey "$key[Right]"     forward-char

	[ -n "$key[Up]"		    ] && bindkey "$key[Up]"		    history-beginning-search-backward
	[ -n "$key[Down]"		] && bindkey "$key[Down]"		history-beginning-search-forward
	[ -n "$key[PageUp]"	    ] && bindkey "$key[PageUp]"	    history-search-backward
	[ -n "$key[PageDown]"	] && bindkey "$key[PageDown]"	history-search-forward

    # Finally, make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    if (( ${+terminfo[smkx]}  )) && (( ${+terminfo[rmkx]}  )); then
        function zle-line-init () {
            echoti smkx
        }
        function zle-line-finish () {
            echoti rmkx
        }
        zle -N zle-line-init
        zle -N zle-line-finish
    fi
fi
# }}}
# }}}

# {{{ CD History
# cd -<NUMBER> to access recent directory list
# This will remember the dirstack across sessions
DIRSTACKSIZE=20
setopt autopushd pushdsilent pushdtohome
setopt pushdignoredups # remove duplicates
setopt pushdminus # reverts +/- operators
DIRSTACKFILE="$XDG_CACHE_HOME/zsh/dirs"
[[ -f $DIRSTACKFILE ]] || mkdir -p `dirname $DIRSTACKFILE` && touch $DIRSTACKFILE
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  # Uncomment to remember and change to the last directory across sessions
  # [[ -d $dirstack[1] ]] && cd $dirstack[1]
fi
chpwd() {
  print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
}
# }}}

# {{{ Load common shell settings
COMMONRC="$HOME"/.shellrc/common
# shellcheck disable=SC1090
if [ -r "$COMMONRC" ]; then source "$COMMONRC"; fi
# }}}
